{"version":3,"file":"import-map-overrides-api.js","sources":["../src/api/js-api.js"],"sourcesContent":["const localStoragePrefix = \"import-map-override:\";\nconst disabledOverridesLocalStorageKey = \"import-map-overrides-disabled\";\nconst externalOverridesLocalStorageKey = \"import-map-overrides-external-maps\";\nconst overrideAttribute = \"data-is-importmap-override\";\n\nconst portRegex = /^\\d+$/g;\n\nconst importMapMetaElement = document.querySelector(\n  'meta[name=\"importmap-type\"]'\n);\n\nconst externalOverrideMapPromises = {};\n\nexport const importMapType = importMapMetaElement\n  ? importMapMetaElement.getAttribute(\"content\")\n  : \"importmap\";\n\nconst serverOverrides = importMapType === \"server\";\n\nlet defaultMapPromise;\n\nwindow.importMapOverrides = {\n  addOverride(moduleName, url) {\n    if (portRegex.test(url)) {\n      url = imo.getUrlFromPort(moduleName, url);\n    }\n    const key = localStoragePrefix + moduleName;\n    localStorage.setItem(key, url);\n    if (serverOverrides) {\n      document.cookie = `${key}=${url}`;\n    }\n    fireChangedEvent();\n    return imo.getOverrideMap();\n  },\n  getOverrideMap(includeDisabled = false) {\n    const overrides = createEmptyImportMap();\n    const disabledOverrides = imo.getDisabledOverrides();\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key.startsWith(localStoragePrefix)) {\n        const moduleName = key.slice(localStoragePrefix.length);\n        if (includeDisabled || !disabledOverrides.includes(moduleName)) {\n          overrides.imports[moduleName] = localStorage.getItem(key);\n        }\n      }\n    }\n    return overrides;\n  },\n  removeOverride(moduleName) {\n    const key = localStoragePrefix + moduleName;\n    const hasItem = localStorage.getItem(key) !== null;\n    localStorage.removeItem(key);\n    if (serverOverrides) {\n      document.cookie = `${key}=; expires=Thu, 01 Jan 1970 00:00:01 GMT;`;\n    }\n    imo.enableOverride(moduleName);\n    fireChangedEvent();\n    return hasItem;\n  },\n  resetOverrides() {\n    Object.keys(imo.getOverrideMap(true).imports).forEach((moduleName) => {\n      imo.removeOverride(moduleName);\n    });\n    localStorage.removeItem(disabledOverridesLocalStorageKey);\n    localStorage.removeItem(externalOverridesLocalStorageKey);\n    fireChangedEvent();\n    return imo.getOverrideMap();\n  },\n  hasOverrides() {\n    return Object.keys(imo.getOverrideMap().imports).length > 0;\n  },\n  getUrlFromPort(moduleName, port) {\n    const fileName = moduleName.replace(/@/g, \"\").replace(/\\//g, \"-\");\n    return `//localhost:${port}/${fileName}.js`;\n  },\n  enableUI() {\n    const customElementName = \"import-map-overrides-full\";\n    const showWhenLocalStorage = \"show-when-local-storage\";\n    let customElement = document.querySelector(customElementName);\n\n    if (!customElement) {\n      customElement = document.createElement(customElementName);\n      customElement.setAttribute(showWhenLocalStorage, \"true\");\n      document.body.appendChild(customElement);\n    }\n\n    const localStorageKey = customElement.getAttribute(showWhenLocalStorage);\n    if (localStorageKey) {\n      localStorage.setItem(localStorageKey, true);\n      customElement.renderWithPreact();\n    }\n  },\n  mergeImportMap(originalMap, newMap) {\n    const outMap = createEmptyImportMap();\n    for (let i in originalMap.imports) {\n      outMap.imports[i] = originalMap.imports[i];\n    }\n    for (let i in newMap.imports) {\n      outMap.imports[i] = newMap.imports[i];\n    }\n    for (let i in originalMap.scopes) {\n      outMap.scopes[i] = originalMap.scopes[i];\n    }\n    for (let i in newMap.scopes) {\n      outMap.scopes[i] = newMap.scopes[i];\n    }\n    return outMap;\n  },\n  getDefaultMap() {\n    return (\n      defaultMapPromise ||\n      (defaultMapPromise = Array.prototype.reduce.call(\n        document.querySelectorAll(\n          `script[type=\"${importMapType}\"], script[type=\"overridable-importmap\"]`\n        ),\n        (promise, scriptEl) => {\n          if (scriptEl.hasAttribute(overrideAttribute)) {\n            return promise;\n          } else {\n            let nextPromise;\n            if (scriptEl.src) {\n              nextPromise = fetchExternalMap(scriptEl.src);\n            } else {\n              nextPromise = Promise.resolve(JSON.parse(scriptEl.textContent));\n            }\n\n            return Promise.all([\n              promise,\n              nextPromise,\n            ]).then(([originalMap, newMap]) =>\n              imo.mergeImportMap(originalMap, newMap)\n            );\n          }\n        },\n        Promise.resolve(createEmptyImportMap())\n      ))\n    );\n  },\n  getCurrentPageMap() {\n    return Promise.all([\n      imo.getDefaultMap(),\n      imo.getExternalOverrideMap(imo.getCurrentPageExternalOverrides()),\n    ]).then(([defaultMap, externalOverridesMap]) => {\n      return imo.mergeImportMap(\n        imo.mergeImportMap(defaultMap, externalOverridesMap),\n        initialOverrideMap\n      );\n    });\n  },\n  getCurrentPageExternalOverrides() {\n    const currentPageExternalOverrides = [];\n    document\n      .querySelectorAll(\n        `[${overrideAttribute}]:not([id=\"import-map-overrides\"])`\n      )\n      .forEach((externalOverrideEl) => {\n        currentPageExternalOverrides.push(externalOverrideEl.src);\n      });\n    return currentPageExternalOverrides;\n  },\n  getNextPageMap() {\n    return Promise.all([\n      imo.getDefaultMap(),\n      imo.getExternalOverrideMap(),\n    ]).then(([defaultMap, externalOverridesMap]) => {\n      return imo.mergeImportMap(\n        imo.mergeImportMap(defaultMap, externalOverridesMap),\n        imo.getOverrideMap()\n      );\n    });\n  },\n  disableOverride(moduleName) {\n    const disabledOverrides = imo.getDisabledOverrides();\n    if (!disabledOverrides.includes(moduleName)) {\n      localStorage.setItem(\n        disabledOverridesLocalStorageKey,\n        JSON.stringify(disabledOverrides.concat(moduleName))\n      );\n      fireChangedEvent();\n      return true;\n    } else {\n      return false;\n    }\n  },\n  enableOverride(moduleName) {\n    const disabledOverrides = imo.getDisabledOverrides();\n    const index = disabledOverrides.indexOf(moduleName);\n    if (index >= 0) {\n      disabledOverrides.splice(index, 1);\n      localStorage.setItem(\n        disabledOverridesLocalStorageKey,\n        JSON.stringify(disabledOverrides)\n      );\n      fireChangedEvent();\n      return true;\n    } else {\n      return false;\n    }\n  },\n  getDisabledOverrides() {\n    const disabledOverrides = localStorage.getItem(\n      disabledOverridesLocalStorageKey\n    );\n    return disabledOverrides ? JSON.parse(disabledOverrides) : [];\n  },\n  isDisabled(moduleName) {\n    return imo.getDisabledOverrides().includes(moduleName);\n  },\n  getExternalOverrides() {\n    let localStorageValue = localStorage.getItem(\n      externalOverridesLocalStorageKey\n    );\n    return localStorageValue ? JSON.parse(localStorageValue).sort() : [];\n  },\n  addExternalOverride(url) {\n    url = new URL(url, document.baseURI).href;\n    const overrides = imo.getExternalOverrides();\n    if (overrides.includes(url)) {\n      return false;\n    } else {\n      localStorage.setItem(\n        externalOverridesLocalStorageKey,\n        JSON.stringify(overrides.concat(url))\n      );\n      fireChangedEvent();\n      return true;\n    }\n  },\n  removeExternalOverride(url) {\n    const overrides = imo.getExternalOverrides();\n    if (overrides.includes(url)) {\n      localStorage.setItem(\n        externalOverridesLocalStorageKey,\n        JSON.stringify(overrides.filter((override) => override !== url))\n      );\n      fireChangedEvent();\n      return true;\n    } else {\n      return false;\n    }\n  },\n  getExternalOverrideMap(externalOverrides = imo.getExternalOverrides()) {\n    return externalOverrides.reduce((result, externalOverride) => {\n      const fetchPromise =\n        externalOverrideMapPromises[externalOverride] ||\n        (externalOverrideMapPromises[externalOverride] = fetchExternalMap(\n          externalOverride\n        ));\n      return Promise.all([result, fetchPromise]).then(\n        ([firstMap, secondMap]) => {\n          return imo.mergeImportMap(firstMap, secondMap);\n        }\n      );\n    }, Promise.resolve(createEmptyImportMap()));\n  },\n  isExternalMapValid(importMapUrl) {\n    const promise =\n      externalOverrideMapPromises[importMapUrl] ||\n      (externalOverrideMapPromises[importMapUrl] = fetchExternalMap(\n        importMapUrl\n      ));\n    return promise.then(() => invalidExternalMaps.includes(importMapUrl));\n  },\n  invalidExternalMaps: [],\n};\n\nconst imo = window.importMapOverrides;\n\nfunction fireChangedEvent() {\n  // Set timeout so that event fires after the change has totally finished\n  setTimeout(() => {\n    if (window.CustomEvent) {\n      window.dispatchEvent(new CustomEvent(\"import-map-overrides:change\"));\n    }\n  });\n}\n\nconst initialOverrideMap = imo.getOverrideMap();\nconst initialExternalOverrideMaps = imo.getExternalOverrides();\n\nconst overridableImportMap = document.querySelector(\n  'script[type=\"overridable-importmap\"]'\n);\n\nlet referenceNode = overridableImportMap;\n\nif (!referenceNode) {\n  const importMaps = document.querySelectorAll(\n    `script[type=\"${importMapType}\"]`\n  );\n  referenceNode = importMaps ? importMaps[importMaps.length - 1] : null;\n}\n\nif (overridableImportMap) {\n  if (overridableImportMap.src) {\n    throw Error(\n      `import-map-overrides: external import maps with type=\"overridable-importmap\" are not supported`\n    );\n  }\n  let originalMap;\n  try {\n    originalMap = JSON.parse(overridableImportMap.textContent);\n  } catch (e) {\n    throw Error(\n      `Invalid <script type=\"overridable-importmap\"> - text content must be json`\n    );\n  }\n\n  referenceNode = insertOverrideMap(\n    imo.mergeImportMap(originalMap, initialOverrideMap),\n    `import-map-overrides`,\n    referenceNode\n  );\n\n  if (initialExternalOverrideMaps.length > 0) {\n    initialExternalOverrideMaps.forEach((mapUrl, index) => {\n      referenceNode = insertOverrideMap(\n        mapUrl,\n        `import-map-overrides-external-${index}`\n      );\n    });\n  }\n} else {\n  if (Object.keys(initialOverrideMap.imports).length > 0) {\n    referenceNode = insertOverrideMap(\n      initialOverrideMap,\n      `import-map-overrides`,\n      referenceNode\n    );\n  }\n}\n\nfunction insertOverrideMap(map, id, referenceNode) {\n  const overrideMapElement = document.createElement(\"script\");\n  overrideMapElement.type = importMapType;\n  overrideMapElement.id = id; // for debugging and for UI to identify this import map as special\n  overrideMapElement.setAttribute(overrideAttribute, \"\");\n  if (typeof map === \"string\") {\n    overrideMapElement.src = map;\n  } else {\n    overrideMapElement.textContent = JSON.stringify(map, null, 2);\n  }\n\n  if (referenceNode) {\n    referenceNode.insertAdjacentElement(\"afterend\", overrideMapElement);\n  } else {\n    document.head.appendChild(overrideMapElement);\n  }\n\n  return overrideMapElement;\n}\n\nfunction fetchExternalMap(url) {\n  return fetch(url).then(\n    (r) => {\n      if (r.ok) {\n        return r.json().catch((err) => {\n          console.warn(\n            Error(\n              `External override import map contained invalid json, at url ${r.url}. ${err}`\n            )\n          );\n          imo.invalidExternalMaps.push(r.url);\n          return createEmptyImportMap();\n        });\n      } else {\n        console.warn(\n          Error(\n            `Unable to download external override import map from url ${r.url}. Server responded with status ${r.status}`\n          )\n        );\n        imo.invalidExternalMaps.push(r.url);\n        return createEmptyImportMap();\n      }\n    },\n    () => {\n      console.warn(\n        Error(`Unable to download external import map at url '${url}'`)\n      );\n      imo.invalidExternalMaps.push(new URL(url, document.baseURI).href);\n      return createEmptyImportMap();\n    }\n  );\n}\n\nfunction createEmptyImportMap() {\n  return { imports: {}, scopes: {} };\n}\n"],"names":["defaultMapPromise","portRegex","importMapMetaElement","document","querySelector","externalOverrideMapPromises","importMapType","getAttribute","serverOverrides","window","importMapOverrides","addOverride","moduleName","url","test","imo","getUrlFromPort","key","localStorage","setItem","cookie","fireChangedEvent","getOverrideMap","includeDisabled","overrides","imports","scopes","disabledOverrides","getDisabledOverrides","i","length","startsWith","slice","includes","getItem","removeOverride","hasItem","removeItem","enableOverride","resetOverrides","Object","keys","forEach","hasOverrides","port","fileName","replace","enableUI","customElement","createElement","setAttribute","body","appendChild","localStorageKey","renderWithPreact","mergeImportMap","originalMap","newMap","outMap","getDefaultMap","Array","prototype","reduce","call","querySelectorAll","promise","scriptEl","hasAttribute","nextPromise","src","fetchExternalMap","Promise","resolve","JSON","parse","textContent","all","then","getCurrentPageMap","getExternalOverrideMap","getCurrentPageExternalOverrides","defaultMap","externalOverridesMap","initialOverrideMap","currentPageExternalOverrides","externalOverrideEl","push","getNextPageMap","disableOverride","stringify","concat","index","indexOf","splice","isDisabled","getExternalOverrides","localStorageValue","sort","addExternalOverride","URL","baseURI","href","removeExternalOverride","filter","override","externalOverrides","result","externalOverride","fetchPromise","firstMap","secondMap","isExternalMapValid","importMapUrl","invalidExternalMaps","setTimeout","CustomEvent","dispatchEvent","initialExternalOverrideMaps","overridableImportMap","referenceNode","importMaps","Error","e","insertOverrideMap","mapUrl","map","id","overrideMapElement","type","insertAdjacentElement","head","fetch","r","ok","json","catch","err","console","warn","status"],"mappings":"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"}