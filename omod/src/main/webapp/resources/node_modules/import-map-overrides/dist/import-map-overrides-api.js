/* import-map-overrides@1.14.2 */
!function(){"use strict";function e(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,r){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var t=[],o=!0,n=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(o=(i=s.next()).done)&&(t.push(i.value),!r||t.length!==r);o=!0);}catch(e){n=!0,a=e}finally{try{o||null==s.return||s.return()}finally{if(n)throw a}}return t}}(e,t)||function(e,t){if(e){if("string"==typeof e)return r(e,t);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(o):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?r(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,o=new Array(r);t<r;t++)o[t]=e[t];return o}var t,o=/^\d+$/g,n=document.querySelector('meta[name="importmap-type"]'),a={},i=n?n.getAttribute("content"):"importmap",s="server"===i;window.importMapOverrides={addOverride:function(e,r){o.test(r)&&(r=c.getUrlFromPort(e,r));var t="import-map-override:"+e;return localStorage.setItem(t,r),s&&(document.cookie="".concat(t,"=").concat(r)),l(),c.getOverrideMap()},getOverrideMap:function(){for(var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],r={imports:{},scopes:{}},t=c.getDisabledOverrides(),o=0;o<localStorage.length;o++){var n=localStorage.key(o);if(n.startsWith("import-map-override:")){var a=n.slice("import-map-override:".length);!e&&t.includes(a)||(r.imports[a]=localStorage.getItem(n))}}return r},removeOverride:function(e){var r="import-map-override:"+e,t=null!==localStorage.getItem(r);return localStorage.removeItem(r),s&&(document.cookie="".concat(r,"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;")),c.enableOverride(e),l(),t},resetOverrides:function(){return Object.keys(c.getOverrideMap(!0).imports).forEach((function(e){c.removeOverride(e)})),localStorage.removeItem("import-map-overrides-disabled"),localStorage.removeItem("import-map-overrides-external-maps"),l(),c.getOverrideMap()},hasOverrides:function(){return Object.keys(c.getOverrideMap().imports).length>0},getUrlFromPort:function(e,r){var t=e.replace(/@/g,"").replace(/\//g,"-");return"//localhost:".concat(r,"/").concat(t,".js")},enableUI:function(){var e=document.querySelector("import-map-overrides-full");e||((e=document.createElement("import-map-overrides-full")).setAttribute("show-when-local-storage","true"),document.body.appendChild(e));var r=e.getAttribute("show-when-local-storage");r&&(localStorage.setItem(r,!0),e.renderWithPreact())},mergeImportMap:function(e,r){var t={imports:{},scopes:{}};for(var o in e.imports)t.imports[o]=e.imports[o];for(var n in r.imports)t.imports[n]=r.imports[n];for(var a in e.scopes)t.scopes[a]=e.scopes[a];for(var i in r.scopes)t.scopes[i]=r.scopes[i];return t},getDefaultMap:function(){return t||(t=Array.prototype.reduce.call(document.querySelectorAll('script[type="'.concat(i,'"], script[type="overridable-importmap"]')),(function(r,t){return t.hasAttribute("data-is-importmap-override")?r:(o=t.src?h(t.src):Promise.resolve(JSON.parse(t.textContent)),Promise.all([r,o]).then((function(r){var t=e(r,2),o=t[0],n=t[1];return c.mergeImportMap(o,n)})));var o}),Promise.resolve({imports:{},scopes:{}})))},getCurrentPageMap:function(){return Promise.all([c.getDefaultMap(),c.getExternalOverrideMap(c.getCurrentPageExternalOverrides())]).then((function(r){var t=e(r,2),o=t[0],n=t[1];return c.mergeImportMap(c.mergeImportMap(o,n),p)}))},getCurrentPageExternalOverrides:function(){var e=[];return document.querySelectorAll("[".concat("data-is-importmap-override",']:not([id="import-map-overrides"])')).forEach((function(r){e.push(r.src)})),e},getNextPageMap:function(){return Promise.all([c.getDefaultMap(),c.getExternalOverrideMap()]).then((function(r){var t=e(r,2),o=t[0],n=t[1];return c.mergeImportMap(c.mergeImportMap(o,n),c.getOverrideMap())}))},disableOverride:function(e){var r=c.getDisabledOverrides();return!r.includes(e)&&(localStorage.setItem("import-map-overrides-disabled",JSON.stringify(r.concat(e))),l(),!0)},enableOverride:function(e){var r=c.getDisabledOverrides(),t=r.indexOf(e);return t>=0&&(r.splice(t,1),localStorage.setItem("import-map-overrides-disabled",JSON.stringify(r)),l(),!0)},getDisabledOverrides:function(){var e=localStorage.getItem("import-map-overrides-disabled");return e?JSON.parse(e):[]},isDisabled:function(e){return c.getDisabledOverrides().includes(e)},getExternalOverrides:function(){var e=localStorage.getItem("import-map-overrides-external-maps");return e?JSON.parse(e).sort():[]},addExternalOverride:function(e){e=new URL(e,document.baseURI).href;var r=c.getExternalOverrides();return!r.includes(e)&&(localStorage.setItem("import-map-overrides-external-maps",JSON.stringify(r.concat(e))),l(),!0)},removeExternalOverride:function(e){var r=c.getExternalOverrides();return!!r.includes(e)&&(localStorage.setItem("import-map-overrides-external-maps",JSON.stringify(r.filter((function(r){return r!==e})))),l(),!0)},getExternalOverrideMap:function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:c.getExternalOverrides();return r.reduce((function(r,t){var o=a[t]||(a[t]=h(t));return Promise.all([r,o]).then((function(r){var t=e(r,2),o=t[0],n=t[1];return c.mergeImportMap(o,n)}))}),Promise.resolve({imports:{},scopes:{}}))},isExternalMapValid:function(e){return(a[e]||(a[e]=h(e))).then((function(){return invalidExternalMaps.includes(e)}))},invalidExternalMaps:[]};var c=window.importMapOverrides;function l(){setTimeout((function(){window.CustomEvent&&window.dispatchEvent(new CustomEvent("import-map-overrides:change"))}))}var p=c.getOverrideMap(),m=c.getExternalOverrides(),u=document.querySelector('script[type="overridable-importmap"]'),d=u;if(!d){var v=document.querySelectorAll('script[type="'.concat(i,'"]'));d=v?v[v.length-1]:null}if(u){if(u.src)throw Error('import-map-overrides: external import maps with type="overridable-importmap" are not supported');var f;try{f=JSON.parse(u.textContent)}catch(e){throw Error('Invalid <script type="overridable-importmap"> - text content must be json')}d=g(c.mergeImportMap(f,p),"import-map-overrides",d),m.length>0&&m.forEach((function(e,r){d=g(e,"import-map-overrides-external-".concat(r))}))}else Object.keys(p.imports).length>0&&(d=g(p,"import-map-overrides",d));function g(e,r,t){var o=document.createElement("script");return o.type=i,o.id=r,o.setAttribute("data-is-importmap-override",""),"string"==typeof e?o.src=e:o.textContent=JSON.stringify(e,null,2),t?t.insertAdjacentElement("afterend",o):document.head.appendChild(o),o}function h(e){return fetch(e).then((function(e){return e.ok?e.json().catch((function(r){return console.warn(Error("External override import map contained invalid json, at url ".concat(e.url,". ").concat(r))),c.invalidExternalMaps.push(e.url),{imports:{},scopes:{}}})):(console.warn(Error("Unable to download external override import map from url ".concat(e.url,". Server responded with status ").concat(e.status))),c.invalidExternalMaps.push(e.url),{imports:{},scopes:{}})}),(function(){return console.warn(Error("Unable to download external import map at url '".concat(e,"'"))),c.invalidExternalMaps.push(new URL(e,document.baseURI).href),{imports:{},scopes:{}}}))}}();
//# sourceMappingURL=import-map-overrides-api.js.map
